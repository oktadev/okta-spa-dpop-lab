{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1 - Get the sample app up and running",
  "nextTour": "2 - Bearer token",
  "steps": [
    {
      "title": "What you need to know about the sample",
      "description": "## Get the sample app up and running\n\nThis code project is an Angular SPA with Okta client libraries already added. You'll need a browser with good developer tooling, such as Chrome, Edge, or Firefox. We've tailored the instructions for Chrome.\n\n**Token assurance and code assurance**\n\nAs you make code changes, the instructions will have you run an automated test script to double-check your work. Testing FTW! 🏆"
    },
    {
      "title": "Sign in to the Okta Admin Console",
      "description": "## Sign in to the Okta Admin Console\n\n1. Navigate to Skilljar in a separate tab in your browser.\n2. Open the **Credentials Panel** by pressing the arrow to the right of the window. \n3. Navigate to the Okta org shown in the **Credentials Panel** in a new browser tab.\n4. Log in using the username and credentials displayed in the **Credentials Panel**.\n5. You'll get a prompt to enroll a second factor, Okta Verify. \n6. After logging into Okta, find the **Admin** button at the top of the site. Press this button to open the Admin Console."
    },
    {
      "title": "Configure the OIDC app integration in Okta",
      "description": "## Configure the OIDC app integration in Okta\n\nYou need to enter information about your Codespace in the settings. Then, you'll run a command that outputs values to the Codespace terminal and paste those values within Okta.\n\nPress [this link to write the Codespace URL to the terminal](command:codetour.sendTextToTerminal?[\"echo https://$CODESPACE_NAME-4200.app.github.dev\"]). Copy the URL that prints in the terminal. \n>Note this runs the following command: `echo https://${CODESPACE_NAME}-4200.app.github.dev`.\n\n➡️ **Copy this URL. You'll need it in the next steps.** ⬅️\n\n### Okta Admin Console configuration\n\nNavigate back to the Okta Admin Console tab. You need to add the Codespace URI as a trusted origin in Okta. Navigate to **Security** > **API** and select the **Trusted Origins** tab. Press the **+ Add origin** button and add the following information:\n1. Use \"DPoP lab\" as the **Origin name**\n2. Paste your CodeSpace URL from the previous step as the **Origin URL**\n3. Choose **Cross-Origin Resource Sharing (CORS)** and **Redirect** as the types\n4. Press **Save**\n\nYour Okta org has an OIDC application pre-created for this lab. Navigate to **Applications** > **Applications** and find the Okta OIDC app with \"DPoP\" in the name. Select the app to open the configuration.\n\nIn the **General** tab, press the **Edit** button under **General Settings** to make the following changes:\n\n1. Scroll to **Login** section\n2. Add the Codespace URL into the **Sign-in redirect URIs** field. Add `/login/callback` to the URL. It should look like `https://$CODESPACE_NAME-4200.app.github.dev/login/callback`.\n3. Add the URL for your Codespace in the **Sign-out redirect URIs** input by pasting the URL. \n4. **Save** your changes. Notice you don't have DPoP enabled yet.\n5. Scroll up to the **Client Credentials** section. Copy the **Client ID**. You can use the clipboard button to copy the Client ID to your clipboard automatically.\n\nWe're all done with the Okta configuration for now. Leave this tab up, we'll be returning to it later in the lab.\n",
      "line": 5
    },
    {
      "file": "src/app/okta.config.ts",
      "description": "## Update the project with your Okta config\n\nThe sample app needs your Okta config info, so we opened the `okta.config.ts` file for you. Let's update the `issuer` and `clientID` values:\n\n1. Replace `{yourOktaClientID}` with the Client ID in your clipboard from the last step. The `OktaConfig` object property should look something like `issuer: '0oabapji';`\n2. Copy your Okta org's URL from the Skilljar or the Okta Admin Console tab.\n   It will look something like `https://oktaice#######.oktapreview.com`. Replace `{yourOktaDomain}` value with this URL.",
      "line": 6
    },
    {
      "file": "src/app/okta.config.ts",
      "description": "## Double check the Okta config\n\nSetting up the Okta configuration required a lot of copying and pasting, so let's double-check our work. The configuration is essential for running the sample app and this lab.\n\nPress [this link to run the unit test script that verifies your code configuration](command:codetour.sendTextToTerminal?[\"npm run test:config\"]).\n>Note this runs the following command: `npm run test:config`.\n\nIf you see the output \n\n`✓ spec-app-okta.config.spec.js (6 tests)`\n\nyou're ready for the next step.\n\nIf you don't see 6 passing tests, you'll need to fix the configuration before continuing. Feel free to ask for help!",
      "line": 10
    },
    {
      "file": "src/app/okta.config.ts",
      "description": "## Configure Codespace visibility\n\nWe use the configuration values you added to initialize Okta. Notice the request includes scopes for reading Okta Users API.\n\nLet's start the app. Open a new terminal window by selecting the **TERMINAL** tab and pressing the ➕ (plus) icon. Run the command `npm start` in the new terminal.\n\nThe app needs to be visible to Okta to complete the sign-in process:\n1. Open the **PORTS** panel within this window and find the app running on port 4200.\n2. Right click on the app and select **Port visibility** > **Public**.\n3. Click the 🌐 (web) icon to open your app in a new browser tab.\n\nYou should see the SPA DPoP Lab site running from the Codespace. If you see a warning from GitHub about accessing a development port in a codespace, press the **Continue** button.\n\nSign in using the credentials provided in Skilljar. Next up - tokens!",
      "line": 11
    }
  ]
}